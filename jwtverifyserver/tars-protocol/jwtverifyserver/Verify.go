// Package jwtverifyserver comment
// This file was generated by tars2go 1.1.10
// Generated from Verify.tars
package jwtverifyserver

import (
	"fmt"

	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = codec.FromInt8

type E_VERIFY_CODE int32

const (
	E_VERIFY_CODE_EVC_TOKEN_EXPIRE = -3
	E_VERIFY_CODE_EVC_ERR_TOKEN    = -2
	E_VERIFY_CODE_EVC_SYS_ERR      = -1
	E_VERIFY_CODE_EVC_SUCC         = 0
)

// VeifyReq struct implement
type VeifyReq struct {
	Token         string            `json:"token"`
	VerifyHeaders map[string]string `json:"verifyHeaders"`
	Body          []int8            `json:"body"`
}

func (st *VeifyReq) ResetDefault() {
}

// ReadFrom reads  from readBuf and put into struct.
func (st *VeifyReq) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = readBuf.ReadString(&st.Token, 1, true)
	if err != nil {
		return err
	}

	have, err = readBuf.SkipTo(codec.MAP, 2, false)
	if err != nil {
		return err
	}

	if have {
		err = readBuf.ReadInt32(&length, 0, true)
		if err != nil {
			return err
		}

		st.VerifyHeaders = make(map[string]string)
		for i0, e0 := int32(0), length; i0 < e0; i0++ {
			var k0 string
			var v0 string

			err = readBuf.ReadString(&k0, 0, false)
			if err != nil {
				return err
			}

			err = readBuf.ReadString(&v0, 1, false)
			if err != nil {
				return err
			}

			st.VerifyHeaders[k0] = v0
		}
	}

	have, ty, err = readBuf.SkipToNoCheck(3, false)
	if err != nil {
		return err
	}

	if have {
		if ty == codec.LIST {
			err = readBuf.ReadInt32(&length, 0, true)
			if err != nil {
				return err
			}

			st.Body = make([]int8, length)
			for i1, e1 := int32(0), length; i1 < e1; i1++ {

				err = readBuf.ReadInt8(&st.Body[i1], 0, false)
				if err != nil {
					return err
				}

			}
		} else if ty == codec.SimpleList {

			_, err = readBuf.SkipTo(codec.BYTE, 0, true)
			if err != nil {
				return err
			}

			err = readBuf.ReadInt32(&length, 0, true)
			if err != nil {
				return err
			}

			err = readBuf.ReadSliceInt8(&st.Body, length, true)
			if err != nil {
				return err
			}

		} else {
			err = fmt.Errorf("require vector, but not")
			if err != nil {
				return err
			}

		}
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *VeifyReq) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require VeifyReq, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *VeifyReq) WriteTo(buf *codec.Buffer) (err error) {

	err = buf.WriteString(st.Token, 1)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.MAP, 2)
	if err != nil {
		return err
	}

	err = buf.WriteInt32(int32(len(st.VerifyHeaders)), 0)
	if err != nil {
		return err
	}

	for k2, v2 := range st.VerifyHeaders {

		err = buf.WriteString(k2, 0)
		if err != nil {
			return err
		}

		err = buf.WriteString(v2, 1)
		if err != nil {
			return err
		}

	}

	err = buf.WriteHead(codec.SimpleList, 3)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.BYTE, 0)
	if err != nil {
		return err
	}

	err = buf.WriteInt32(int32(len(st.Body)), 0)
	if err != nil {
		return err
	}

	err = buf.WriteSliceInt8(st.Body)
	if err != nil {
		return err
	}

	return err
}

// WriteBlock encode struct
func (st *VeifyReq) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}

// VeifyRsp struct implement
type VeifyRsp struct {
	Ret     int32  `json:"ret"`
	Uid     string `json:"uid"`
	Context string `json:"context"`
}

func (st *VeifyRsp) ResetDefault() {
}

// ReadFrom reads  from readBuf and put into struct.
func (st *VeifyRsp) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = readBuf.ReadInt32(&st.Ret, 1, true)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Uid, 2, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Context, 3, false)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *VeifyRsp) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require VeifyRsp, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *VeifyRsp) WriteTo(buf *codec.Buffer) (err error) {

	err = buf.WriteInt32(st.Ret, 1)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Uid, 2)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Context, 3)
	if err != nil {
		return err
	}

	return err
}

// WriteBlock encode struct
func (st *VeifyRsp) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}
