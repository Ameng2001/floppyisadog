// Package accountserver comment
// This file was generated by tars2go 1.1.10
// Generated from Account.tars
package accountserver

import (
	"fmt"

	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = codec.FromInt8

// Timestamp struct implement
type Timestamp struct {
	Seconds int64 `json:"seconds"`
	Nanos   int32 `json:"nanos"`
}

func (st *Timestamp) ResetDefault() {
}

// ReadFrom reads  from readBuf and put into struct.
func (st *Timestamp) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = readBuf.ReadInt64(&st.Seconds, 0, true)
	if err != nil {
		return err
	}

	err = readBuf.ReadInt32(&st.Nanos, 1, true)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *Timestamp) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require Timestamp, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *Timestamp) WriteTo(buf *codec.Buffer) (err error) {

	err = buf.WriteInt64(st.Seconds, 0)
	if err != nil {
		return err
	}

	err = buf.WriteInt32(st.Nanos, 1)
	if err != nil {
		return err
	}

	return err
}

// WriteBlock encode struct
func (st *Timestamp) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}

// AccountInfo struct implement
type AccountInfo struct {
	Uuid                 string    `json:"uuid"`
	Name                 string    `json:"name"`
	Email                string    `json:"email"`
	Confirmed_and_active bool      `json:"confirmed_and_active"`
	Member_since         Timestamp `json:"member_since"`
	Support              bool      `json:"support"`
	Phonenumber          string    `json:"phonenumber"`
	Photo_url            string    `json:"photo_url"`
}

func (st *AccountInfo) ResetDefault() {
	st.Member_since.ResetDefault()
}

// ReadFrom reads  from readBuf and put into struct.
func (st *AccountInfo) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = readBuf.ReadString(&st.Uuid, 0, true)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Name, 1, true)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Email, 2, true)
	if err != nil {
		return err
	}

	err = readBuf.ReadBool(&st.Confirmed_and_active, 3, true)
	if err != nil {
		return err
	}

	err = st.Member_since.ReadBlock(readBuf, 4, true)
	if err != nil {
		return err
	}

	err = readBuf.ReadBool(&st.Support, 5, true)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Phonenumber, 6, true)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Photo_url, 7, true)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *AccountInfo) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require AccountInfo, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *AccountInfo) WriteTo(buf *codec.Buffer) (err error) {

	err = buf.WriteString(st.Uuid, 0)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Name, 1)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Email, 2)
	if err != nil {
		return err
	}

	err = buf.WriteBool(st.Confirmed_and_active, 3)
	if err != nil {
		return err
	}

	err = st.Member_since.WriteBlock(buf, 4)
	if err != nil {
		return err
	}

	err = buf.WriteBool(st.Support, 5)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Phonenumber, 6)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Photo_url, 7)
	if err != nil {
		return err
	}

	return err
}

// WriteBlock encode struct
func (st *AccountInfo) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}

// UpdatePasswordRequest struct implement
type UpdatePasswordRequest struct {
	Uuid     string `json:"uuid"`
	Password string `json:"password"`
}

func (st *UpdatePasswordRequest) ResetDefault() {
}

// ReadFrom reads  from readBuf and put into struct.
func (st *UpdatePasswordRequest) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = readBuf.ReadString(&st.Uuid, 0, true)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Password, 1, true)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *UpdatePasswordRequest) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require UpdatePasswordRequest, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *UpdatePasswordRequest) WriteTo(buf *codec.Buffer) (err error) {

	err = buf.WriteString(st.Uuid, 0)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Password, 1)
	if err != nil {
		return err
	}

	return err
}

// WriteBlock encode struct
func (st *UpdatePasswordRequest) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}

// VerifyPasswordRequest struct implement
type VerifyPasswordRequest struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (st *VerifyPasswordRequest) ResetDefault() {
}

// ReadFrom reads  from readBuf and put into struct.
func (st *VerifyPasswordRequest) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = readBuf.ReadString(&st.Email, 0, true)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Password, 1, true)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *VerifyPasswordRequest) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require VerifyPasswordRequest, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *VerifyPasswordRequest) WriteTo(buf *codec.Buffer) (err error) {

	err = buf.WriteString(st.Email, 0)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Password, 1)
	if err != nil {
		return err
	}

	return err
}

// WriteBlock encode struct
func (st *VerifyPasswordRequest) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}

// AccountList struct implement
type AccountList struct {
	Accounts []AccountInfo `json:"accounts"`
	Limit    int32         `json:"limit"`
	Offset   int32         `json:"offset"`
}

func (st *AccountList) ResetDefault() {
}

// ReadFrom reads  from readBuf and put into struct.
func (st *AccountList) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	_, ty, err = readBuf.SkipToNoCheck(0, true)
	if err != nil {
		return err
	}

	if ty == codec.LIST {
		err = readBuf.ReadInt32(&length, 0, true)
		if err != nil {
			return err
		}

		st.Accounts = make([]AccountInfo, length)
		for i0, e0 := int32(0), length; i0 < e0; i0++ {

			err = st.Accounts[i0].ReadBlock(readBuf, 0, false)
			if err != nil {
				return err
			}

		}
	} else if ty == codec.SimpleList {
		err = fmt.Errorf("not support SimpleList type")
		if err != nil {
			return err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return err
		}

	}

	err = readBuf.ReadInt32(&st.Limit, 1, true)
	if err != nil {
		return err
	}

	err = readBuf.ReadInt32(&st.Offset, 2, true)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *AccountList) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require AccountList, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *AccountList) WriteTo(buf *codec.Buffer) (err error) {

	err = buf.WriteHead(codec.LIST, 0)
	if err != nil {
		return err
	}

	err = buf.WriteInt32(int32(len(st.Accounts)), 0)
	if err != nil {
		return err
	}

	for _, v := range st.Accounts {

		err = v.WriteBlock(buf, 0)
		if err != nil {
			return err
		}

	}

	err = buf.WriteInt32(st.Limit, 1)
	if err != nil {
		return err
	}

	err = buf.WriteInt32(st.Offset, 2)
	if err != nil {
		return err
	}

	return err
}

// WriteBlock encode struct
func (st *AccountList) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}

// GetAccountListRequest struct implement
type GetAccountListRequest struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

func (st *GetAccountListRequest) ResetDefault() {
}

// ReadFrom reads  from readBuf and put into struct.
func (st *GetAccountListRequest) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = readBuf.ReadInt32(&st.Offset, 0, true)
	if err != nil {
		return err
	}

	err = readBuf.ReadInt32(&st.Limit, 1, true)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *GetAccountListRequest) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require GetAccountListRequest, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *GetAccountListRequest) WriteTo(buf *codec.Buffer) (err error) {

	err = buf.WriteInt32(st.Offset, 0)
	if err != nil {
		return err
	}

	err = buf.WriteInt32(st.Limit, 1)
	if err != nil {
		return err
	}

	return err
}

// WriteBlock encode struct
func (st *GetAccountListRequest) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}

// CreateAccountRequest struct implement
type CreateAccountRequest struct {
	Name        string `json:"name"`
	Email       string `json:"email"`
	Phonenumber string `json:"phonenumber"`
}

func (st *CreateAccountRequest) ResetDefault() {
}

// ReadFrom reads  from readBuf and put into struct.
func (st *CreateAccountRequest) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = readBuf.ReadString(&st.Name, 0, true)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Email, 1, true)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Phonenumber, 2, true)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *CreateAccountRequest) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require CreateAccountRequest, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *CreateAccountRequest) WriteTo(buf *codec.Buffer) (err error) {

	err = buf.WriteString(st.Name, 0)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Email, 1)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Phonenumber, 2)
	if err != nil {
		return err
	}

	return err
}

// WriteBlock encode struct
func (st *CreateAccountRequest) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}

// GetAccountRequest struct implement
type GetAccountRequest struct {
	Uuid string `json:"uuid"`
}

func (st *GetAccountRequest) ResetDefault() {
}

// ReadFrom reads  from readBuf and put into struct.
func (st *GetAccountRequest) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = readBuf.ReadString(&st.Uuid, 0, true)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *GetAccountRequest) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require GetAccountRequest, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *GetAccountRequest) WriteTo(buf *codec.Buffer) (err error) {

	err = buf.WriteString(st.Uuid, 0)
	if err != nil {
		return err
	}

	return err
}

// WriteBlock encode struct
func (st *GetAccountRequest) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}

// GetAccountByPhonenumberRequest struct implement
type GetAccountByPhonenumberRequest struct {
	Phonenumber string `json:"phonenumber"`
}

func (st *GetAccountByPhonenumberRequest) ResetDefault() {
}

// ReadFrom reads  from readBuf and put into struct.
func (st *GetAccountByPhonenumberRequest) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = readBuf.ReadString(&st.Phonenumber, 0, true)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *GetAccountByPhonenumberRequest) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require GetAccountByPhonenumberRequest, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *GetAccountByPhonenumberRequest) WriteTo(buf *codec.Buffer) (err error) {

	err = buf.WriteString(st.Phonenumber, 0)
	if err != nil {
		return err
	}

	return err
}

// WriteBlock encode struct
func (st *GetAccountByPhonenumberRequest) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}

// PasswordResetRequest struct implement
type PasswordResetRequest struct {
	Email string `json:"email"`
}

func (st *PasswordResetRequest) ResetDefault() {
}

// ReadFrom reads  from readBuf and put into struct.
func (st *PasswordResetRequest) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = readBuf.ReadString(&st.Email, 0, true)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *PasswordResetRequest) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require PasswordResetRequest, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *PasswordResetRequest) WriteTo(buf *codec.Buffer) (err error) {

	err = buf.WriteString(st.Email, 0)
	if err != nil {
		return err
	}

	return err
}

// WriteBlock encode struct
func (st *PasswordResetRequest) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}

// EmailChangeRequest struct implement
type EmailChangeRequest struct {
	Uuid  string `json:"uuid"`
	Email string `json:"email"`
}

func (st *EmailChangeRequest) ResetDefault() {
}

// ReadFrom reads  from readBuf and put into struct.
func (st *EmailChangeRequest) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = readBuf.ReadString(&st.Uuid, 0, true)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Email, 1, true)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *EmailChangeRequest) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require EmailChangeRequest, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *EmailChangeRequest) WriteTo(buf *codec.Buffer) (err error) {

	err = buf.WriteString(st.Uuid, 0)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Email, 1)
	if err != nil {
		return err
	}

	return err
}

// WriteBlock encode struct
func (st *EmailChangeRequest) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}

// EmailConfirmation struct implement
type EmailConfirmation struct {
	Uuid  string `json:"uuid"`
	Email string `json:"email"`
}

func (st *EmailConfirmation) ResetDefault() {
}

// ReadFrom reads  from readBuf and put into struct.
func (st *EmailConfirmation) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = readBuf.ReadString(&st.Uuid, 0, true)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Email, 1, true)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *EmailConfirmation) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require EmailConfirmation, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *EmailConfirmation) WriteTo(buf *codec.Buffer) (err error) {

	err = buf.WriteString(st.Uuid, 0)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Email, 1)
	if err != nil {
		return err
	}

	return err
}

// WriteBlock encode struct
func (st *EmailConfirmation) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}

// GetOrCreateRequest struct implement
type GetOrCreateRequest struct {
	Name        string `json:"name"`
	Email       string `json:"email"`
	Phonenumber string `json:"phonenumber"`
}

func (st *GetOrCreateRequest) ResetDefault() {
}

// ReadFrom reads  from readBuf and put into struct.
func (st *GetOrCreateRequest) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = readBuf.ReadString(&st.Name, 0, true)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Email, 1, true)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Phonenumber, 2, true)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *GetOrCreateRequest) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require GetOrCreateRequest, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *GetOrCreateRequest) WriteTo(buf *codec.Buffer) (err error) {

	err = buf.WriteString(st.Name, 0)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Email, 1)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Phonenumber, 2)
	if err != nil {
		return err
	}

	return err
}

// WriteBlock encode struct
func (st *GetOrCreateRequest) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}

// TrackEventRequest struct implement
type TrackEventRequest struct {
	Uuid  string `json:"uuid"`
	Event string `json:"event"`
}

func (st *TrackEventRequest) ResetDefault() {
}

// ReadFrom reads  from readBuf and put into struct.
func (st *TrackEventRequest) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = readBuf.ReadString(&st.Uuid, 0, true)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Event, 1, true)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *TrackEventRequest) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require TrackEventRequest, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *TrackEventRequest) WriteTo(buf *codec.Buffer) (err error) {

	err = buf.WriteString(st.Uuid, 0)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Event, 1)
	if err != nil {
		return err
	}

	return err
}

// WriteBlock encode struct
func (st *TrackEventRequest) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}

// SyncUserRequest struct implement
type SyncUserRequest struct {
	Uuid string `json:"uuid"`
}

func (st *SyncUserRequest) ResetDefault() {
}

// ReadFrom reads  from readBuf and put into struct.
func (st *SyncUserRequest) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = readBuf.ReadString(&st.Uuid, 0, true)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *SyncUserRequest) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require SyncUserRequest, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *SyncUserRequest) WriteTo(buf *codec.Buffer) (err error) {

	err = buf.WriteString(st.Uuid, 0)
	if err != nil {
		return err
	}

	return err
}

// WriteBlock encode struct
func (st *SyncUserRequest) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}
