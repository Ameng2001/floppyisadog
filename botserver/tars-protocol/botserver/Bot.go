// Package botserver comment
// This file was generated by tars2go 1.1.10
// Generated from Bot.tars
package botserver

import (
	"fmt"

	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
	"github.com/floppyisadog/botserver/tars-protocol/companyserver"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = codec.FromInt8

// OnboardWorkerRequest struct implement
type OnboardWorkerRequest struct {
	Company_uuid string `json:"company_uuid"`
	User_uuid    string `json:"user_uuid"`
}

func (st *OnboardWorkerRequest) ResetDefault() {
}

// ReadFrom reads  from readBuf and put into struct.
func (st *OnboardWorkerRequest) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = readBuf.ReadString(&st.Company_uuid, 0, true)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.User_uuid, 1, true)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *OnboardWorkerRequest) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require OnboardWorkerRequest, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *OnboardWorkerRequest) WriteTo(buf *codec.Buffer) (err error) {

	err = buf.WriteString(st.Company_uuid, 0)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.User_uuid, 1)
	if err != nil {
		return err
	}

	return err
}

// WriteBlock encode struct
func (st *OnboardWorkerRequest) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}

// AlertNewShiftRequest struct implement
type AlertNewShiftRequest struct {
	User_uuid string                  `json:"user_uuid"`
	New_shift companyserver.ShiftInfo `json:"new_shift"`
}

func (st *AlertNewShiftRequest) ResetDefault() {
	st.New_shift.ResetDefault()
}

// ReadFrom reads  from readBuf and put into struct.
func (st *AlertNewShiftRequest) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = readBuf.ReadString(&st.User_uuid, 0, true)
	if err != nil {
		return err
	}

	err = st.New_shift.ReadBlock(readBuf, 1, true)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *AlertNewShiftRequest) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require AlertNewShiftRequest, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *AlertNewShiftRequest) WriteTo(buf *codec.Buffer) (err error) {

	err = buf.WriteString(st.User_uuid, 0)
	if err != nil {
		return err
	}

	err = st.New_shift.WriteBlock(buf, 1)
	if err != nil {
		return err
	}

	return err
}

// WriteBlock encode struct
func (st *AlertNewShiftRequest) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}

// AlertNewShiftsRequest struct implement
type AlertNewShiftsRequest struct {
	User_uuid  string                    `json:"user_uuid"`
	New_shifts []companyserver.ShiftInfo `json:"new_shifts"`
}

func (st *AlertNewShiftsRequest) ResetDefault() {
}

// ReadFrom reads  from readBuf and put into struct.
func (st *AlertNewShiftsRequest) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = readBuf.ReadString(&st.User_uuid, 0, true)
	if err != nil {
		return err
	}

	_, ty, err = readBuf.SkipToNoCheck(1, true)
	if err != nil {
		return err
	}

	if ty == codec.LIST {
		err = readBuf.ReadInt32(&length, 0, true)
		if err != nil {
			return err
		}

		st.New_shifts = make([]companyserver.ShiftInfo, length)
		for i0, e0 := int32(0), length; i0 < e0; i0++ {

			err = st.New_shifts[i0].ReadBlock(readBuf, 0, false)
			if err != nil {
				return err
			}

		}
	} else if ty == codec.SimpleList {
		err = fmt.Errorf("not support SimpleList type")
		if err != nil {
			return err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return err
		}

	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *AlertNewShiftsRequest) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require AlertNewShiftsRequest, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *AlertNewShiftsRequest) WriteTo(buf *codec.Buffer) (err error) {

	err = buf.WriteString(st.User_uuid, 0)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.LIST, 1)
	if err != nil {
		return err
	}

	err = buf.WriteInt32(int32(len(st.New_shifts)), 0)
	if err != nil {
		return err
	}

	for _, v := range st.New_shifts {

		err = v.WriteBlock(buf, 0)
		if err != nil {
			return err
		}

	}

	return err
}

// WriteBlock encode struct
func (st *AlertNewShiftsRequest) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}

// AlertRemovedShiftRequest struct implement
type AlertRemovedShiftRequest struct {
	User_uuid string                  `json:"user_uuid"`
	Old_shift companyserver.ShiftInfo `json:"old_shift"`
}

func (st *AlertRemovedShiftRequest) ResetDefault() {
	st.Old_shift.ResetDefault()
}

// ReadFrom reads  from readBuf and put into struct.
func (st *AlertRemovedShiftRequest) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = readBuf.ReadString(&st.User_uuid, 0, true)
	if err != nil {
		return err
	}

	err = st.Old_shift.ReadBlock(readBuf, 1, true)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *AlertRemovedShiftRequest) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require AlertRemovedShiftRequest, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *AlertRemovedShiftRequest) WriteTo(buf *codec.Buffer) (err error) {

	err = buf.WriteString(st.User_uuid, 0)
	if err != nil {
		return err
	}

	err = st.Old_shift.WriteBlock(buf, 1)
	if err != nil {
		return err
	}

	return err
}

// WriteBlock encode struct
func (st *AlertRemovedShiftRequest) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}

// AlertRemovedShiftsRequest struct implement
type AlertRemovedShiftsRequest struct {
	User_uuid  string                    `json:"user_uuid"`
	Old_shifts []companyserver.ShiftInfo `json:"old_shifts"`
}

func (st *AlertRemovedShiftsRequest) ResetDefault() {
}

// ReadFrom reads  from readBuf and put into struct.
func (st *AlertRemovedShiftsRequest) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = readBuf.ReadString(&st.User_uuid, 0, true)
	if err != nil {
		return err
	}

	_, ty, err = readBuf.SkipToNoCheck(1, true)
	if err != nil {
		return err
	}

	if ty == codec.LIST {
		err = readBuf.ReadInt32(&length, 0, true)
		if err != nil {
			return err
		}

		st.Old_shifts = make([]companyserver.ShiftInfo, length)
		for i0, e0 := int32(0), length; i0 < e0; i0++ {

			err = st.Old_shifts[i0].ReadBlock(readBuf, 0, false)
			if err != nil {
				return err
			}

		}
	} else if ty == codec.SimpleList {
		err = fmt.Errorf("not support SimpleList type")
		if err != nil {
			return err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return err
		}

	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *AlertRemovedShiftsRequest) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require AlertRemovedShiftsRequest, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *AlertRemovedShiftsRequest) WriteTo(buf *codec.Buffer) (err error) {

	err = buf.WriteString(st.User_uuid, 0)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.LIST, 1)
	if err != nil {
		return err
	}

	err = buf.WriteInt32(int32(len(st.Old_shifts)), 0)
	if err != nil {
		return err
	}

	for _, v := range st.Old_shifts {

		err = v.WriteBlock(buf, 0)
		if err != nil {
			return err
		}

	}

	return err
}

// WriteBlock encode struct
func (st *AlertRemovedShiftsRequest) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}

// AlertChangedShiftRequest struct implement
type AlertChangedShiftRequest struct {
	User_uuid string                  `json:"user_uuid"`
	Old_shift companyserver.ShiftInfo `json:"old_shift"`
	New_shift companyserver.ShiftInfo `json:"new_shift"`
}

func (st *AlertChangedShiftRequest) ResetDefault() {
	st.Old_shift.ResetDefault()
	st.New_shift.ResetDefault()
}

// ReadFrom reads  from readBuf and put into struct.
func (st *AlertChangedShiftRequest) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = readBuf.ReadString(&st.User_uuid, 0, true)
	if err != nil {
		return err
	}

	err = st.Old_shift.ReadBlock(readBuf, 1, true)
	if err != nil {
		return err
	}

	err = st.New_shift.ReadBlock(readBuf, 2, true)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *AlertChangedShiftRequest) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require AlertChangedShiftRequest, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *AlertChangedShiftRequest) WriteTo(buf *codec.Buffer) (err error) {

	err = buf.WriteString(st.User_uuid, 0)
	if err != nil {
		return err
	}

	err = st.Old_shift.WriteBlock(buf, 1)
	if err != nil {
		return err
	}

	err = st.New_shift.WriteBlock(buf, 2)
	if err != nil {
		return err
	}

	return err
}

// WriteBlock encode struct
func (st *AlertChangedShiftRequest) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}
